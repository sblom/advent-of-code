<Query Kind="Statements">
  <NuGetReference>LinqToRanges</NuGetReference>
  <NuGetReference>RegExtract</NuGetReference>
  <Namespace>LinqToRanges</Namespace>
  <Namespace>RegExtract</Namespace>
  <Namespace>static System.Math</Namespace>
  <Namespace>System.Collections.Immutable</Namespace>
</Query>

#region Preamble

#load "..\Lib\Utils"
#load "..\Lib\BFS"

//#define TEST
//#define CHECKED

#if !TEST
var lines = await AoC.GetLinesWeb();
#else
var lines = @"AAAJA 222
AAJJA 961
KKKKJ 689
KKKJJ 210
QQJQQ 127
999JJ 261
8888J 829
88JJ8 495
777J7 401
7J77J 821
66J66 217
6J6J6 29
5555J 837
5J5JJ 321
5JJ55 629
44J44 716
44JJ4 519
333J3 538
3J3J3 329
222J2 981
2JJJJ 421
JQJQQ 978
JQJQJ 927
JTTTT 299
J9999 607
JJTTT 907
JJ77J 662
JJ222 129
JJJJ8 619
AAAA3 395
AAATA 755
AA9AA 10
AA4AA 842
AA4AJ 342
AKKKK 34
AQQQQ 459
ATJTJ 879
A9999 96
A8AAA 384
A77J7 945
A2AJA 326
AJJ4A 414
KKK2K 343
KKQKK 931
KK7KK 425
KKJQK 856
KTTTT 644
K3333 595
QKKJJ 97
QQQQ2 419
QQQ5Q 667
QQQJ9 524
QQTJQ 554
QQ8QQ 79
QQ4QQ 163
QQJ7Q 822
Q99J9 577
Q6666 966
Q3QQQ 15
Q3QJQ 306
QJJKQ 818
TQTTT 213
TTKJT 828
TTTT3 967
TTT8T 754
TT6TT 124
TT6TJ 751
TTJ3J 676
T4TTT 799
T4444 792
T2TTJ 215
TJTT9 797
TJTT3 38
TJJ7T 758
9T9J9 383
99K99 74
99998 570
98J88 359
97J9J 979
9JA99 598
9J9K9 189
8KKKK 95
8KJKK 982
888A8 722
8888K 216
88868 868
88858 198
88JJ2 855
86J8J 997
8388J 47
8JK88 681
8J8T8 227
7AAAA 766
7TTTT 492
7TTJT 748
7787J 740
77774 838
777J9 541
77577 949
76666 749
75555 25
7333J 651
6QQQJ 888
69666 295
696J6 78
66A66 228
666AJ 390
6668J 817
66663 646
66466 44
66266 278
66JKJ 977
66J76 396
62222 456
6J69J 610
6J266 622
5AAAJ 63
5KJKK 98
5QJ55 782
5T555 366
59999 877
57J55 115
555K5 27
55595 350
55585 695
5555Q 823
55556 417
55JJA 46
54555 378
53555 810
52555 544
52222 307
5J545 863
5J255 591
4QJ44 320
49999 405
48888 404
477JJ 841
466J6 637
444AJ 150
44494 700
4444Q 83
44448 271
44244 330
44J46 917
43J33 543
4JQQQ 168
4J744 881
4J445 718
4J2J2 388
3A333 834
3KKKK 636
399J9 561
39333 500
38333 237
366J6 45
35333 167
33T3J 964
33363 621
33334 726
2AAAA 487
2A222 448
2QJQQ 107
27222 194
22TJ2 436
22922 75
22822 996
2242J 238
222K2 100
22J2A 865
JAA9A 480
JATAA 803
JAJ5A 940
JQJAQ 201
J9996 692
J9959 76
J8488 252
J8J55 523
J7999 896
J77Q7 660
J7477 294
J5558 878
J44JA 427
J32J3 24
J26J6 283
J2223 173
J2J55 886
JJA22 728
JJQJA 446
JJ488 704
AA9J9 256
AA777 694
AA77J 831
AA444 188
AQAJQ 177
ATATT 778
ATJTA 518
A88A8 62
A7A7A 471
A5A55 771
A55AA 741
KAAKA 348
KAKKA 170
KKK77 773
KK88K 602
KK55J 769
KK222 763
KTTKJ 678
K8K88 654
KJQQK 583
QAAAQ 496
QQKKK 231
QQ2Q2 229
QTTTQ 807
Q8Q8Q 6
Q333Q 48
TKTTK 77
TT44T 61
T88TT 244
T888T 13
T5TT5 250
T5T55 58
T5J5T 161
T33JT 52
TJ7T7 715
9KK9K 900
9K9K9 756
9Q99Q 22
99AA9 687
99393 906
98988 493
95599 890
9J977 575
9J292 508
89899 292
88686 885
88585 600
884J4 225
88228 719
7K7K7 90
79779 221
78878 334
77887 909
77722 777
77447 331
76676 553
7J676 304
6K6KJ 367
6Q6Q6 311
699J6 445
686J8 376
67677 963
66QQQ 744
666AA 377
66699 876
66622 4
62226 578
5AJ5A 149
5K55K 819
5QQQ5 935
5QJQ5 345
595J9 757
57775 232
55Q5Q 762
55666 673
55566 364
55533 975
55252 385
53353 804
4KKK4 80
4QQQ4 990
49949 187
49494 59
48848 702
477J4 481
46464 701
45554 606
45445 301
44Q4Q 117
44T4T 688
4499J 714
44884 128
44774 206
444KK 142
44224 796
44JQQ 437
43343 708
42242 677
3AA33 560
3A3AA 988
37773 558
33KKK 832
33TTT 557
33773 916
33388 615
2A2AA 847
2KK2K 147
29292 679
27272 460
2626J 346
25252 255
JKAAK 482
JK8K8 585
J4TT4 319
J3838 567
J2QQ2 444
J2255 242
AA67A 286
AKAA5 381
AKJ9K 264
ATQTJ 473
A8KJK 486
A888Q 272
A8788 816
A775J 912
A33J7 505
A282J 852
AJK2A 627
AJTTK 196
AJ979 897
AJ7A6 192
AJ434 901
AJ3T3 891
AJJ37 339
KA9AA 478
KK9K3 858
KK8K3 893
KK7QJ 284
KK67K 820
KQ7QJ 123
KQ7J7 603
KT3TT 507
K9TTT 1
K6665 582
K66J7 407
K5KKA 28
K4454 767
K3KJ5 765
K2QQQ 133
K222A 720
KJTK7 559
KJ74J 282
QKJAA 696
QQAQ8 172
QQQ24 862
QQ94Q 467
QTTT6 211
Q9TQJ 116
Q959J 734
Q63JJ 764
Q6222 288
Q4J94 152
Q3Q5J 669
Q2777 980
QJ9QA 67
QJJK5 665
TAQQQ 989
TKKKA 332
TQQQ5 785
TT8T9 998
TT6TA 574
T9T5T 939
T8TTA 706
T8488 268
T8J8K 759
T77K7 488
T6669 743
T5JTK 57
T3933 717
TJAA7 374
TJK9J 35
TJQ4Q 68
9K9T9 50
9KJ49 723
9QJ33 101
99A9T 49
99967 274
9899K 986
98699 650
969A9 365
9666Q 499
965JJ 658
96J6A 220
95997 175
94979 709
9399K 565
935JJ 798
922K2 712
9J9A8 833
9J3JA 139
8K3KJ 212
8QQQ7 470
8Q288 546
89A99 87
8882K 398
8858K 533
88JT4 130
877K7 60
87772 223
87J84 443
842J8 971
83353 659
82AAA 894
8J32J 233
7AAA4 549
7KJK5 738
7Q77K 434
7TATT 11
7TQJT 479
78828 848
7775A 73
7775Q 180
77678 21
77647 504
77587 277
76JTJ 884
74AAJ 611
7377T 614
72KKK 298
72K77 576
6KKK5 501
6K86J 451
6944J 791
68Q8J 727
676T6 368
67686 588
66A76 999
66QKJ 131
66T6A 219
66462 623
66386 526
63JJ4 351
626T6 772
62665 542
6J65T 548
5AQ5J 153
5A5J8 733
5K55Q 36
5QKQJ 224
5T777 721
5999K 941
59939 506
58688 8
57595 880
56QQQ 43
56667 245
5636J 592
55Q53 422
555Q2 806
55358 156
54558 703
54447 246
526J6 363
52J88 889
5JA59 392
5J6T5 136
5J52K 531
4AAA6 534
4A9JA 653
4A446 510
4K4TJ 929
4Q445 362
4TAAA 135
4TTTQ 328
4T454 639
49448 742
4777Q 750
464JA 908
444A7 788
444A3 800
4447K 892
44349 296
44JAT 568
4J525 642
3AAA4 302
3AKJK 693
3A9AA 529
3K555 323
3KJK6 447
3QJQK 452
39Q33 609
39383 394
3899J 239
36TJ3 324
34T44 491
3447J 30
34J8J 360
333A6 89
33JQ2 520
32K22 584
3J352 691
2AA3A 513
2A777 711
2Q9QJ 942
2TT3T 393
29TTJ 310
27666 408
27JJT 690
2666A 683
26272 373
25224 281
2372J 811
22782 148
2J429 354
2J427 108
JAA65 66
JK4A4 698
JKJ42 730
JQQK9 179
JQ9Q5 474
JQJTA 705
JTQKT 209
JT5A5 143
J9T3T 875
J98KK 618
J922A 440
J8J5K 399
J7A55 88
J7697 587
J6367 32
J5696 291
J484Q 344
J4J3T 41
J3J5K 844
JJQ6T 563
JJ7A9 166
JJ52A 293
JJ293 449
AAKK6 928
AA665 370
AA2KK 784
AQ99Q 843
A85A5 273
A75A5 643
A6A64 234
A5566 17
A4K4A 866
A424A 926
A3QAQ 31
A33A7 932
KAKQA 110
KATTK 666
KKQ5Q 134
KK99T 453
KK686 102
KK2TT 498
K8822 70
K665K 724
K58K8 5
K4774 746
QKKQ9 204
QKKTT 371
QKK77 830
QKQK4 640
QQ344 596
Q9Q98 450
Q92Q9 528
Q66Q9 925
Q6677 333
Q4949 953
Q3Q38 564
Q24Q2 983
Q23Q3 556
Q2255 955
TQQT3 1000
TTK8K 729
T9T94 387
T8AT8 118
T8T98 536
T7T97 280
T5QQ5 18
T5522 247
T3T88 680
T2Q2T 483
9K229 258
993KK 530
9933T 300
97973 14
9669K 289
94954 382
93539 254
8A448 361
8KTK8 768
8T66T 638
88AKA 566
84994 248
7ATA7 290
7KK79 174
7K2K2 753
7Q5Q5 375
7TKKT 808
7TTA7 725
7TT99 649
79957 263
77KKT 105
77TTQ 461
779Q9 934
77443 469
77282 950
76755 257
72724 475
6KK22 92
6K633 589
6QQ76 435
6Q464 285
67979 171
66KTK 594
66K88 914
667TT 86
66343 774
62AA2 776
5KK65 262
5T858 739
58353 960
58225 537
57K75 191
577T5 827
56A5A 64
55KAA 895
55T8T 193
558A8 183
558QQ 920
55499 814
553QQ 420
54757 835
53577 732
4AA4Q 985
4K3K4 454
4Q4Q5 672
4T8T8 54
47A7A 249
47467 176
47457 138
45T54 545
45646 69
45335 952
4455A 466
43KK3 125
434AA 962
4224T 357
3AA3K 260
3A993 325
3K3KA 489
3K37K 439
3K35K 938
38366 625
36A63 593
35A3A 56
34437 182
33Q88 911
32243 463
2A7A2 243
2KT2K 645
2QQTT 648
2QQT2 137
2QQ62 761
2Q8Q8 119
2Q66Q 539
2TT23 438
29A9A 308
28338 423
255A2 51
24662 251
24423 915
2332T 752
22A3A 845
22733 713
AA436 353
AKT6J 155
AK993 794
AQT7J 355
ATA85 626
A97JK 551
A9JK6 793
A8QAT 872
A663T 318
A426J 202
AJ96T 218
AJ689 586
AJ285 899
KAQ4Q 882
KQK5T 521
KQ48J 352
KTQ8T 7
KTT38 902
KT7T2 103
KT788 515
KT5J7 675
KT45K 617
K92JQ 707
K9J6T 918
K79A9 599
K49K5 391
K4432 402
K42KT 240
K368J 99
K35TJ 314
K2A9K 747
K22TQ 270
KJQ69 140
KJ35A 779
QA8TJ 903
QKK86 634
QKQT4 572
QQ739 287
QT33A 503
QT332 869
Q9272 372
Q7A5J 555
Q7Q2A 937
Q79T9 809
Q7JK3 527
Q6K96 297
Q65AA 655
Q62TJ 430
Q56Q2 786
Q564Q 898
Q4429 185
Q3QT6 424
Q3556 686
Q3JKT 338
Q2AAT 276
QJ954 976
QJ8KA 418
QJ4A7 512
TA9J8 104
TA9J4 657
TA67T 883
TKA3K 579
TK63J 641
TQ4TK 93
TT956 230
TT589 236
T9924 936
T9522 668
T8AA3 406
T7796 305
T773Q 970
T652J 745
T65J9 199
T2Q72 620
T29JK 605
T25JK 664
9AK3A 873
9A27J 993
9AJ85 113
9K8AA 279
9K497 630
9KJA2 275
9Q97K 82
9Q4KK 303
9Q2Q3 190
9TQJ6 429
95A52 789
95T53 956
944T7 126
93T29 317
9223Q 991
8A747 457
8K682 974
8TK48 109
8TT47 601
88976 203
868Q7 987
846K6 944
8465J 954
8464K 121
84JA9 484
84J7Q 805
83676 2
8J3KA 699
8J329 633
7A3KK 613
7KQ3Q 870
797KT 581
76962 195
768QQ 573
7673T 904
75A8J 200
755Q4 465
74Q34 490
74QJ2 984
73A63 19
73Q67 265
73TJ5 379
73257 159
7J8TQ 111
6AK9K 516
6ATAK 552
6A765 624
6A494 731
6AJ9Q 965
6AJ54 214
6T9T7 710
685T5 824
683JQ 197
64K67 867
64Q26 801
647AJ 509
64347 921
63834 369
6322K 186
62A64 416
625J9 336
62JT8 860
5KQJT 590
5TAT2 849
5994T 502
59377 235
56684 120
558Q3 631
53329 341
5233K 165
4AJK2 958
49483 697
488K7 16
46J82 146
43QTJ 226
43T47 933
425AA 157
4J3T8 476
3K356 12
3Q662 781
3TA3K 464
3T887 154
39446 597
37QTT 72
37754 652
35899 53
35652 580
34A4Q 922
33Q78 540
33489 661
3JK78 815
3JQT8 160
3JT52 656
3J675 37
2AA84 178
2QAKK 327
2QK4K 770
2Q89J 356
2Q545 946
2T8J7 628
27A33 3
278K2 674
2766A 647
27248 874
26AT6 671
26A68 455
24725 9
23959 924
22A6K 775
22T47 340
224AT 887
JA685 612
JA376 905
JA254 151
JK695 973
JQK6T 106
JQ5K6 608
JTA23 477
JT732 347
J9K4T 497
J89Q5 181
J795A 85
J6579 462
J547T 735
J5423 853
J4K72 114
J4857 335
J4236 23
J38QA 635
J32A7 787
AK942 684
AQ735 569
ATQ79 94
AT376 313
AT235 141
A835K 616
A7285 813
A65K2 550
A62Q7 737
A5862 309
A48K3 409
A3684 923
KA658 389
KQ794 802
K97Q2 485
K84T2 20
K75Q4 144
K734A 71
K568Q 846
K32AT 943
K28A4 736
QA6T2 760
QK748 859
QT238 959
Q968T 857
Q5948 442
Q489A 322
Q4687 957
TAQ69 535
TA576 840
TK572 972
TK385 403
TQ35K 825
TQ32A 836
T9254 826
T6578 315
T56A3 432
T48KQ 854
T47A6 241
T4683 604
T45A7 386
T3Q92 433
T36Q7 472
T3476 790
T2K86 169
T29Q4 33
9AT23 207
9K583 91
982T3 184
9782A 81
95AKT 864
94Q57 525
8A394 532
8A26T 431
8T265 441
89432 494
86K94 947
8592Q 468
84Q39 458
842K5 562
827A6 795
827Q3 122
7AKQ2 969
7Q436 919
7TKQ2 358
79T46 428
78A3T 40
785T2 259
78295 571
75A29 132
74869 994
73T5Q 65
72KA3 851
6AKQ9 670
6AQ94 84
6K9A3 312
6K38Q 397
6Q852 951
6T3AQ 410
6972Q 522
67KQA 316
67Q2K 871
5A829 995
5K8T7 269
5K798 400
5K6Q4 205
5Q2A3 913
5TA7K 162
5TKQ6 266
5T679 511
5T489 26
59647 682
59436 42
5932K 349
4A598 253
4KQA3 850
4K539 968
4Q6A5 663
495AT 632
48A79 910
48729 267
48576 839
472T5 948
46Q2A 39
4653K 812
45Q96 208
43T7K 413
42TQ7 112
3AQ82 380
3TK28 337
398K6 783
384A7 780
37895 412
36A78 514
36872 930
36847 517
3654Q 55
359T4 426
2A345 685
2K563 861
2K534 547
2T548 415
29TAQ 145
275TA 992
268K3 164
25QKA 411
JJJJJ 158".GetLines();
#endif

#if CHECKED
checked{
#endif

#endregion

lines = lines.Select(s => s.Split(" ")[0]).Dump();
Util.Dif(lines,lines.OrderByDescending(x=>x,new HandComparer(true))).Dump();


var hands = lines.Extract<(string, int)>(@"([0-9TJQKA]+) (\d+)");
hands.OrderBy(x => x.Item1, new HandComparer(jokers: false)).Select((x, i) => x.Item2 * (i + 1)).Sum().Dump("Part 1");
hands.OrderByDescending(x => x.Item1, new HandComparer(jokers: true)).Select((x, i) => x.Item2 * (i + 1)).Sum().Dump("Part 2");




class HandComparer : IComparer<string>
{
    bool jokers;

    public HandComparer(bool jokers)
    {
        this.jokers = jokers;
    }

    int Cardval(char ch)
    {
        return ch switch
        {
            'A' => 14,
            'K' => 13,
            'Q' => 12,
            'J' => jokers ? 0 : 11,
            'T' => 10,
            _ => ch - '0'
        };
    }

    int IComparer<string>.Compare(string? h1, string? h2)
    {
        var s1 = h1.GroupBy(ch => ch).OrderByDescending(g => g.Count()).Select(g => (g.Key, g.Count())).ToList();
        var s2 = h2.GroupBy(ch => ch).OrderByDescending(g => g.Count()).Select(g => (g.Key, g.Count())).ToList();
        
        if (jokers)
        {
            if (h1 != "JJJJJ")
            {
                var ji1 = s1.FindIndex(x => x.Key == 'J');            
                if (ji1 != -1)
                {
                var j1 = s1[ji1].Item2;
                s1.RemoveAt(ji1);
                s1[0] = (s1[0].Key, s1[0].Item2 + j1);
                }
            }

            if (h2 != "JJJJJ")
            {
                var ji2 = s2.FindIndex(x => x.Key == 'J');
                if (ji2 != -1)
                {
                    var j2 = s2[ji2].Item2;
                    s2.RemoveAt(ji2);
                    s2[0] = (s2[0].Key, s2[0].Item2 + j2);
                }
            }
        }

        var p1 = s1 switch
        {
            [(_, 5)] => 10,
            [(_, 4), ..] => 9,
            [(_, 3), (_, 2)] => 8,
            [(_, 3), ..] => 7,
            [(_, 2), (_, 2), ..] => 6,
            [(_, 2), ..] => 5,
            _ => 4
        };

        var p2 = s2 switch
        {
            [(_, 5)] => 10,
            [(_, 4), ..] => 9,
            [(_, 3), (_, 2)] => 8,
            [(_, 3), ..] => 7,
            [(_, 2), (_, 2), ..] => 6,
            [(_, 2), ..] => 5,
            _ => 4
        };

        if (p1 == p2)
        {
            int t = 0;
            int i = 0;
            while (t == 0 && i < 5)
            {
                t += Cardval(h1[i]) - Cardval(h2[i]);
                i++;
            }
            return t;
        }
        else
        {
            return p1 - p2;
        }
    }
}

#if CHECKED
}
#endif
